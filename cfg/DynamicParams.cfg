#!/usr/bin/env python
PACKAGE = "ema_fes_cycling"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# mygroup = gen.add_group("MyGroup", type="tab")  # types: 'hide', 'collapse', 'apply', 'tab'

gen.add("Q_Enable",			bool_t,	0, "Enables quadriceps stimulation",	False)
gen.add("H_Enable",			bool_t,	0, "Enables hamstrings stimulation",	False)
gen.add("G_Enable",			bool_t,	0, "Enables gluteal stimulation",		False)
gen.add("Shift",			int_t,	0, "Shift for velocity",	35,	0,	100)

# dont change group names! they're used by other pieces of code
# eg. "Quadriceps_CH1/2" should remain the same

quad_config = gen.add_group("Quadriceps_CH1/2",	type="hide")
quad_config.add("Q_Link_Current",		bool_t, 0, "Modifies both current values at the same time", True)
quad_config.add("Q_Current_Left",		int_t,  0, "Stimulator current on the left leg",		0,	0,	80)
quad_config.add("Q_Current_Right",		int_t,  0, "Stimulator current on the right leg",		0,	0,	80)
quad_config.add("Q_Pulse_Width_Left",	int_t,  0, "Stimulator pulse width on the left leg",	0,	0,	500)
quad_config.add("Q_Pulse_Width_Right",	int_t,  0, "Stimulator pulse width on the right leg",	0,	0,	500)

quad_config.add("Q_Link_Angle",			bool_t, 0, "Mirrors the angle interval to the opposite leg", True)
quad_config.add("Q_Angle_Left_Min",		int_t,  0, "Start stimulation angle for the left leg",	280,	0,	360)
quad_config.add("Q_Angle_Left_Max",		int_t,	0, "End stimulation angle for the left leg",	20,		0,	360)
quad_config.add("Q_Angle_Right_Min",	int_t,  0, "Start stimulation angle for the right leg",	100,	0,	360)
quad_config.add("Q_Angle_Right_Max",	int_t,  0, "End stimulation angle for the right leg",	200,	0,	360)

hams_config = gen.add_group("Hamstrings_CH3/4",	type="hide")
hams_config.add("H_Link_Current",		bool_t, 0, "Modifies both current values at the same time", True)
hams_config.add("H_Current_Left",		int_t,  0, "Stimulator current on the left leg",		0,	0,	80)
hams_config.add("H_Current_Right",		int_t,  0, "Stimulator current on the right leg",		0,	0,	80)
hams_config.add("H_Pulse_Width_Left",	int_t,  0, "Stimulator pulse width on the left leg",	0,	0,	500)
hams_config.add("H_Pulse_Width_Right",	int_t,  0, "Stimulator pulse width on the right leg",	0,	0,	500)

hams_config.add("H_Link_Angle",			bool_t, 0, "Mirrors the angle interval to the opposite leg", True)
hams_config.add("H_Angle_Left_Min",		int_t,  0, "Start stimulation angle for the left leg",	30,		0,	360)
hams_config.add("H_Angle_Left_Max",		int_t,	0, "End stimulation angle for the left leg",	105,	0,	360)
hams_config.add("H_Angle_Right_Min",	int_t,  0, "Start stimulation angle for the right leg",	210,	0,	360)
hams_config.add("H_Angle_Right_Max",	int_t,  0, "End stimulation angle for the right leg",	285,	0,	360)

glut_config = gen.add_group("Gluteal_CH5/6",	type="hide")
glut_config.add("G_Link_Current",		bool_t, 0, "Modifies both current values at the same time", True)
glut_config.add("G_Current_Left",		int_t,  0, "Stimulator current on the left leg",		0,	0,	80)
glut_config.add("G_Current_Right",		int_t,  0, "Stimulator current on the right leg",		0,	0,	80)
glut_config.add("G_Pulse_Width_Left",	int_t,  0, "Stimulator pulse width on the left leg",	0,	0,	500)
glut_config.add("G_Pulse_Width_Right",	int_t,  0, "Stimulator pulse width on the right leg",	0,	0,	500)

glut_config.add("G_Link_Angle",			bool_t, 0, "Mirrors the angle interval to the opposite leg", True)
glut_config.add("G_Angle_Left_Min",		int_t,  0, "Start stimulation angle for the left leg",	70,		0,	360)
glut_config.add("G_Angle_Left_Max",		int_t,	0, "End stimulation angle for the left leg",	170,	0,	360)
glut_config.add("G_Angle_Right_Min",	int_t,  0, "Start stimulation angle for the right leg",	250,	0,	360)
glut_config.add("G_Angle_Right_Max",	int_t,  0, "End stimulation angle for the right leg",	350,	0,	360)

exit(gen.generate(PACKAGE, "server", "DynamicParams"))

