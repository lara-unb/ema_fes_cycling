#!/usr/bin/env python

"""

The cfg file defines dynamic parameters, as well as their names, types,
level, description, default values and more. It also determines how the
reconfiguration GUI will look like. The catkin_make command has to be run
for the changes in this file to take effect. This file is usually in the
/cfg subdirectory of a package. More info on:
http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile

Parameters can be grouped. Each group has a type that defines how it appears
on the GUI. The types can be either hide, collapse, apply or tab. Here
is an example:

gen = ParameterGenerator()
mygroup = gen.add_group("MyGroup", type="tab")
mygroup.add("ON_OFF", bool_t, 0, "Turns the system on/off", False) ...

                    _________ NOTES _________

Be careful when changing parameters, their attributes are used by other
pieces of code.

Level identifies each parameter and consists of 5 numbers described here:
    - First 2: refer to its group
    - Next 2: refer to the element/parameter itself
    - Last: refer to the stimulator channel affected

Ch12: used with quadriceps (rectus), refers to stimulator channels 1 and 2
Ch34: used with hamstrings, refers to stimulator channels 3 and 4
Ch56: used with gluteal, refers to stimulator channels 5 and 6
Ch78: used with quadriceps (lateral), refers to stimulator channels 7 and 8

"""

PACKAGE = "ema_fes_cycling"  # Pkg where the server runs

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       name               type   level               description               min,default,max
gen.add("Ch12Enable",     bool_t, 99001, "Enables channel 1 and 2 stimulation",           False)
gen.add("Ch34Enable",     bool_t, 99003, "Enables channel 3 and 4 stimulation",           False)
gen.add("Ch56Enable",     bool_t, 99005, "Enables channel 5 and 6 stimulation",           False)
gen.add("Ch78Enable",     bool_t, 99007, "Enables channel 7 and 8 stimulation",           False)
gen.add("Shift",          int_t,  99010, "Shift for velocity",                      0,   0, 100)
gen.add("MarkAssistance", bool_t, 99020, "Mark when assistance is needed",                False)
gen.add("AutoCEnable",    bool_t, 99030, "Enables the simple current control",            False)
gen.add("AutoCShift",     int_t,  99040, "Max shift for current",                  10,   0,  80)
gen.add("AutoCVelocity",  int_t,  99050, "Increase current if velocity is lower",  48,   0, 150)

Ch12_config = gen.add_group("Ch12", type="hide", state=False)
Ch12_config.add("Ch12LinkCurrent", bool_t, 12100, "Modifies both current values at the same time",  True)
Ch12_config.add("Ch1Current",      int_t,  12111, "Stimulator current for channel 1",        0,   0, 110)
Ch12_config.add("Ch2Current",      int_t,  12112, "Stimulator current for channel 2",        0,   0, 110)
Ch12_config.add("Ch1PulseWidth",   int_t,  12121, "Stimulator pulse width for channel 1",  500,   0, 500)
Ch12_config.add("Ch2PulseWidth",   int_t,  12122, "Stimulator pulse width for channel 2",  500,   0, 500)

Ch12_config.add("Ch12LinkAngle",   bool_t, 12200, "Mirrors the angle interval to the opposite leg", True)
Ch12_config.add("Ch1AngleMin",     int_t,  12211, "Start stimulation angle for channel 1", 280,   0, 360)
Ch12_config.add("Ch1AngleMax",     int_t,  12221, "End stimulation angle for channel 1",    20,   0, 360)
Ch12_config.add("Ch2AngleMin",     int_t,  12212, "Start stimulation angle for channel 2", 100,   0, 360)
Ch12_config.add("Ch2AngleMax",     int_t,  12222, "End stimulation angle for channel 2",   200,   0, 360)

Ch34_config = gen.add_group("Ch34", type="hide", state=False)
Ch34_config.add("Ch34LinkCurrent", bool_t, 34100, "Modifies both current values at the same time",  True)
Ch34_config.add("Ch3Current",      int_t,  34113, "Stimulator current for channel 3",        0,   0, 110)
Ch34_config.add("Ch4Current",      int_t,  34114, "Stimulator current for channel 4",        0,   0, 110)
Ch34_config.add("Ch3PulseWidth",  int_t,   34123, "Stimulator pulse width for channel 3",  500,   0, 500)
Ch34_config.add("Ch4PulseWidth",  int_t,   34124, "Stimulator pulse width for channel 4",  500,   0, 500)

Ch34_config.add("Ch34LinkAngle",   bool_t, 34200, "Mirrors the angle interval to the opposite leg", True)
Ch34_config.add("Ch3AngleMin",     int_t,  34213, "Start stimulation angle for channel 3",  30,   0, 360)
Ch34_config.add("Ch3AngleMax",     int_t,  34223, "End stimulation angle for channel 3",   105,   0, 360)
Ch34_config.add("Ch4AngleMin",     int_t,  34214, "Start stimulation angle for channel 4", 210,   0, 360)
Ch34_config.add("Ch4AngleMax",     int_t,  34224, "End stimulation angle for channel 4",   285,   0, 360)

Ch56_config = gen.add_group("Ch56", type="hide", state=False)
Ch56_config.add("Ch56LinkCurrent", bool_t, 56100, "Modifies both current values at the same time",  True)
Ch56_config.add("Ch5Current",      int_t,  56115, "Stimulator current for channel 5",        0,   0, 110)
Ch56_config.add("Ch6Current",      int_t,  56116, "Stimulator current for channel 6",        0,   0, 110)
Ch56_config.add("Ch5PulseWidth",  int_t,   56125, "Stimulator pulse width for channel 5",  500,   0, 500)
Ch56_config.add("Ch6PulseWidth",  int_t,   56126, "Stimulator pulse width for channel 6",  500,   0, 500)

Ch56_config.add("Ch56LinkAngle",   bool_t, 56200, "Mirrors the angle interval to the opposite leg", True)
Ch56_config.add("Ch5AngleMin",     int_t,  56215, "Start stimulation angle for channel 5",  70,   0, 360)
Ch56_config.add("Ch5AngleMax",     int_t,  56225, "End stimulation angle for channel 5",   170,   0, 360)
Ch56_config.add("Ch6AngleMin",     int_t,  56216, "Start stimulation angle for channel 6", 250,   0, 360)
Ch56_config.add("Ch6AngleMax",     int_t,  56226, "End stimulation angle for channel 6",   350,   0, 360)

Ch78_config = gen.add_group("Ch78", type="hide", state=False)
Ch78_config.add("Ch78LinkCurrent", bool_t, 78100, "Modifies both current values at the same time",  True)
Ch78_config.add("Ch7Current",      int_t,  78117, "Stimulator current for channel 7",        0,   0, 110)
Ch78_config.add("Ch8Current",      int_t,  78118, "Stimulator current for channel 8",        0,   0, 110)
Ch78_config.add("Ch7PulseWidth",  int_t,   78127, "Stimulator pulse width for channel 7",  500,   0, 500)
Ch78_config.add("Ch8PulseWidth",  int_t,   78128, "Stimulator pulse width for channel 8",  500,   0, 500)

Ch78_config.add("Ch78LinkAngle",   bool_t, 78200, "Mirrors the angle interval to the opposite leg", True)
Ch78_config.add("Ch7AngleMin",     int_t,  78217, "Start stimulation angle for channel 7", 280,   0, 360)
Ch78_config.add("Ch7AngleMax",     int_t,  78227, "End stimulation angle for channel 7",    20,   0, 360)
Ch78_config.add("Ch8AngleMin",     int_t,  78218, "Start stimulation angle for channel 8", 100,   0, 360)
Ch78_config.add("Ch8AngleMax",     int_t,  78228, "End stimulation angle for channel 8",   200,   0, 360)

exit(gen.generate(PACKAGE, PACKAGE, "TrikeServer"))  # "cfgfilename"
