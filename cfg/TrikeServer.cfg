#!/usr/bin/env python

"""

The cfg file defines dynamic parameters, as well as their names, types,
level, description, default values and more. It also determines how the
reconfiguration GUI will look like. The catkin_make command has to be run
for the changes in this file to take effect. This file is usually in the
/cfg subdirectory of a package. More info on:
http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile

Parameters can be grouped. Each group has a type that defines how it appears
on the GUI. The types can be either hide, collapse, apply or tab. Here
is an example:

gen = ParameterGenerator()
mygroup = gen.add_group("MyGroup", type="tab")
mygroup.add("ON_OFF", bool_t, 0, "Turns the system on/off", False) ...

                    _________ NOTES _________

Be careful when changing parameters, their attributes are used by other
pieces of code.

Level identifies each parameter and consists of 5 numbers described here:
    - First 2: refer to its group
    - Next 2: refer to the element/parameter itself
    - Last: refer to the stimulator channel affected

"""

PACKAGE = "ema_fes_cycling"  # Pkg where the server runs

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       name               type   level               description                default,min,max
gen.add("ch12_enable",     bool_t,   99001, "Enables channel 1 and 2 stimulation",           False)
gen.add("ch34_enable",     bool_t,   99003, "Enables channel 3 and 4 stimulation",           False)
gen.add("ch56_enable",     bool_t,   99005, "Enables channel 5 and 6 stimulation",           False)
gen.add("ch78_enable",     bool_t,   99007, "Enables channel 7 and 8 stimulation",           False)
gen.add("shift",           int_t,    99010, "Speed angle shift parameter",            10,   0, 100)
gen.add("ramp_start",      int_t,    99013, "Start ramp for stimulation",             25,   0,  50)
gen.add("ramp_end",        int_t,    99015, "End ramp for stimulation",               20,   0,  50)
gen.add("all_link_current",bool_t,   99060, "Change current for all active channels",        False)

gen.add("autoPW_initial",  int_t,    90301, "Set the first pulse width value",       0,   0, 500)
gen.add("autoPW_max_1",    int_t,    90311, "1st maximum pulse width value",       200,   0, 500)
gen.add("autoPW_tramp_1",  double_t, 90321, "1st ramp phase duration (sec)",         5,   5, 300)
gen.add("autoPW_tcons_1",  double_t, 90331, "1st constant phase duration (sec)",    25,   0, 300)
gen.add("autoPW_step_1",   int_t,    90341, "1st Step amount to vary pulse width",  10,   0, 500)
gen.add("autoPW_max_2",    int_t,    90312, "2nd maximum pulse width value",       450,   0, 500)
gen.add("autoPW_tramp_2",  double_t, 90322, "2nd ramp phase duration (sec)",         5,   5, 300)
gen.add("autoPW_tcons_2",  double_t, 90332, "2nd constant phase duration (sec)",    25,   0, 300)
gen.add("autoPW_step_2",   int_t,    90342, "2nd Step amount to vary pulse width",  10,   0, 500)
gen.add("autoPW_on",       bool_t,   90300, "Turn on pulse width automatic sequences",     False)

ch12_config = gen.add_group("ch12", type="hide", state=False)
ch12_config.add("ch12_link_current", bool_t, 12100, "Modifies both current values at the same time",  True)
ch12_config.add("ch1_current",       int_t,  12111, "Stimulator current for channel 1",        0,   0, 110)
ch12_config.add("ch2_current",       int_t,  12112, "Stimulator current for channel 2",        0,   0, 110)
ch12_config.add("ch1_pulse_width",   int_t,  12121, "Stimulator pulse width for channel 1",    0,   0, 500)
ch12_config.add("ch2_pulse_width",   int_t,  12122, "Stimulator pulse width for channel 2",    0,   0, 500)

ch12_config.add("ch12_link_angle",   bool_t, 12200, "Mirrors the angle interval to the opposite leg", True)
ch12_config.add("ch1_angle_min",     int_t,  12211, "Start stimulation angle for channel 1", 275,   0, 360)
ch12_config.add("ch1_angle_max",     int_t,  12221, "End stimulation angle for channel 1",    20,   0, 360)
ch12_config.add("ch2_angle_min",     int_t,  12212, "Start stimulation angle for channel 2",  95,   0, 360)
ch12_config.add("ch2_angle_max",     int_t,  12222, "End stimulation angle for channel 2",   200,   0, 360)

ch34_config = gen.add_group("ch34", type="hide", state=False)
ch34_config.add("ch34_link_current", bool_t, 34100, "Modifies both current values at the same time",  True)
ch34_config.add("ch3_current",       int_t,  34113, "Stimulator current for channel 3",        0,   0, 110)
ch34_config.add("ch4_current",       int_t,  34114, "Stimulator current for channel 4",        0,   0, 110)
ch34_config.add("ch3_pulse_width",   int_t,  34123, "Stimulator pulse width for channel 3",    0,   0, 500)
ch34_config.add("ch4_pulse_width",   int_t,  34124, "Stimulator pulse width for channel 4",    0,   0, 500)

ch34_config.add("ch34_link_angle",   bool_t, 34200, "Mirrors the angle interval to the opposite leg", True)
ch34_config.add("ch3_angle_min",     int_t,  34213, "Start stimulation angle for channel 3",  30,   0, 360)
ch34_config.add("ch3_angle_max",     int_t,  34223, "End stimulation angle for channel 3",   105,   0, 360)
ch34_config.add("ch4_angle_min",     int_t,  34214, "Start stimulation angle for channel 4", 210,   0, 360)
ch34_config.add("ch4_angle_max",     int_t,  34224, "End stimulation angle for channel 4",   285,   0, 360)

ch56_config = gen.add_group("ch56", type="hide", state=False)
ch56_config.add("ch56_link_current", bool_t, 56100, "Modifies both current values at the same time",  True)
ch56_config.add("ch5_current",       int_t,  56115, "Stimulator current for channel 5",        0,   0, 110)
ch56_config.add("ch6_current",       int_t,  56116, "Stimulator current for channel 6",        0,   0, 110)
ch56_config.add("ch5_pulse_width",   int_t,  56125, "Stimulator pulse width for channel 5",    0,   0, 500)
ch56_config.add("ch6_pulse_width",   int_t,  56126, "Stimulator pulse width for channel 6",    0,   0, 500)

ch56_config.add("ch56_link_angle",   bool_t, 56200, "Mirrors the angle interval to the opposite leg", True)
ch56_config.add("ch5_angle_min",     int_t,  56215, "Start stimulation angle for channel 5",  70,   0, 360)
ch56_config.add("ch5_angle_max",     int_t,  56225, "End stimulation angle for channel 5",   170,   0, 360)
ch56_config.add("ch6_angle_min",     int_t,  56216, "Start stimulation angle for channel 6", 250,   0, 360)
ch56_config.add("ch6_angle_max",     int_t,  56226, "End stimulation angle for channel 6",   350,   0, 360)

ch78_config = gen.add_group("ch78", type="hide", state=False)
ch78_config.add("ch78_link_current", bool_t, 78100, "Modifies both current values at the same time",  True)
ch78_config.add("ch7_current",       int_t,  78117, "Stimulator current for channel 7",        0,   0, 110)
ch78_config.add("ch8_current",       int_t,  78118, "Stimulator current for channel 8",        0,   0, 110)
ch78_config.add("ch7_pulse_width",   int_t,  78127, "Stimulator pulse width for channel 7",    0,   0, 500)
ch78_config.add("ch8_pulse_width",   int_t,  78128, "Stimulator pulse width for channel 8",    0,   0, 500)

ch78_config.add("ch78_link_angle",   bool_t, 78200, "Mirrors the angle interval to the opposite leg", True)
ch78_config.add("ch7_angle_min",     int_t,  78217, "Start stimulation angle for channel 7", 275,   0, 360)
ch78_config.add("ch7_angle_max",     int_t,  78227, "End stimulation angle for channel 7",    20,   0, 360)
ch78_config.add("ch8_angle_min",     int_t,  78218, "Start stimulation angle for channel 8",  95,   0, 360)
ch78_config.add("ch8_angle_max",     int_t,  78228, "End stimulation angle for channel 8",   200,   0, 360)

exit(gen.generate(PACKAGE, PACKAGE, "TrikeServer"))  # "cfgfilename"
